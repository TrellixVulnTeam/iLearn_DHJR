{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/monic/Desktop/iLearn/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { TestBed, fakeAsync, tick } from '@angular/core/testing';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { FormsModule } from '@angular/forms';\nimport { By } from '@angular/platform-browser';\nimport { NewPostComponent } from './new-post.component';\ndescribe('NewPostComponent', () => {\n  let component;\n  let fixture;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield TestBed.configureTestingModule({\n      declarations: [NewPostComponent],\n      imports: [RouterTestingModule, HttpClientTestingModule, FormsModule]\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    fixture = TestBed.createComponent(NewPostComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should change the value of error if there is no content', () => {\n    //Error should only occur on submit if there is no content\n    expect(component.error.valueOf()).toBeFalsy();\n    component.onSubmit();\n    fixture.detectChanges();\n    expect(component.error.valueOf()).toBeTruthy();\n  });\n  it('should update the value of content when typed in', fakeAsync(() => {\n    const input = fixture.debugElement.query(By.css('textarea')).nativeElement;\n    fixture.detectChanges();\n    tick();\n    input.value = 'Test';\n    input.dispatchEvent(new Event('input'));\n    tick();\n    expect(component.content).toBe('Test');\n  }));\n  it('should call the service method when submitted', fakeAsync(() => {\n    const input = fixture.debugElement.query(By.css('textarea')).nativeElement;\n    fixture.detectChanges();\n    tick();\n    console.log(input);\n    input.value = 'Test';\n    input.dispatchEvent(new Event('input'));\n    fixture.detectChanges();\n    tick();\n  }));\n});","map":{"version":3,"sources":["C:\\Users\\monic\\Desktop\\iLearn\\src\\app\\components\\new-post\\new-post.component.spec.ts"],"names":[],"mappings":";AAAA,SAA2B,OAA3B,EAAoC,SAApC,EAA+C,IAA/C,QAA2D,uBAA3D;AACA,SAAQ,mBAAR,QAAkC,yBAAlC;AACA,SAAQ,uBAAR,QAA6D,8BAA7D;AACA,SAAS,WAAT,QAA4B,gBAA5B;AACA,SAAS,EAAT,QAAmB,2BAAnB;AAEA,SAAS,gBAAT,QAAiC,sBAAjC;AAEA,QAAQ,CAAC,kBAAD,EAAqB,MAAK;AAChC,MAAI,SAAJ;AACA,MAAI,OAAJ;AAEA,EAAA,UAAU,iCAAC,aAAW;AACpB,UAAM,OAAO,CAAC,sBAAR,CAA+B;AACnC,MAAA,YAAY,EAAE,CAAE,gBAAF,CADqB;AAEnC,MAAA,OAAO,EAAE,CAAC,mBAAD,EAAsB,uBAAtB,EAA+C,WAA/C;AAF0B,KAA/B,EAIL,iBAJK,EAAN;AAKD,GANS,EAAV;AAQA,EAAA,UAAU,CAAC,MAAK;AACd,IAAA,OAAO,GAAG,OAAO,CAAC,eAAR,CAAwB,gBAAxB,CAAV;AACA,IAAA,SAAS,GAAG,OAAO,CAAC,iBAApB;AACA,IAAA,OAAO,CAAC,aAAR;AACD,GAJS,CAAV;AAMA,EAAA,EAAE,CAAC,eAAD,EAAkB,MAAK;AACvB,IAAA,MAAM,CAAC,SAAD,CAAN,CAAkB,UAAlB;AACD,GAFC,CAAF;AAIA,EAAA,EAAE,CAAC,yDAAD,EAA4D,MAAK;AACjE;AACA,IAAA,MAAM,CAAC,SAAS,CAAC,KAAV,CAAgB,OAAhB,EAAD,CAAN,CAAkC,SAAlC;AACA,IAAA,SAAS,CAAC,QAAV;AACA,IAAA,OAAO,CAAC,aAAR;AACA,IAAA,MAAM,CAAC,SAAS,CAAC,KAAV,CAAgB,OAAhB,EAAD,CAAN,CAAkC,UAAlC;AACD,GANC,CAAF;AAQA,EAAA,EAAE,CAAC,kDAAD,EAAqD,SAAS,CAAC,MAAK;AACpE,UAAM,KAAK,GAAG,OAAO,CAAC,YAAR,CAAqB,KAArB,CAA2B,EAAE,CAAC,GAAH,CAAO,UAAP,CAA3B,EAA+C,aAA7D;AACA,IAAA,OAAO,CAAC,aAAR;AACA,IAAA,IAAI;AACJ,IAAA,KAAK,CAAC,KAAN,GAAc,MAAd;AACA,IAAA,KAAK,CAAC,aAAN,CAAoB,IAAI,KAAJ,CAAU,OAAV,CAApB;AACA,IAAA,IAAI;AACJ,IAAA,MAAM,CAAC,SAAS,CAAC,OAAX,CAAN,CAA0B,IAA1B,CAA+B,MAA/B;AACD,GAR+D,CAA9D,CAAF;AAUA,EAAA,EAAE,CAAC,+CAAD,EAAkD,SAAS,CAAC,MAAI;AAChE,UAAM,KAAK,GAAG,OAAO,CAAC,YAAR,CAAqB,KAArB,CAA2B,EAAE,CAAC,GAAH,CAAO,UAAP,CAA3B,EAA+C,aAA7D;AACA,IAAA,OAAO,CAAC,aAAR;AACA,IAAA,IAAI;AACJ,IAAA,OAAO,CAAC,GAAR,CAAY,KAAZ;AACA,IAAA,KAAK,CAAC,KAAN,GAAc,MAAd;AACA,IAAA,KAAK,CAAC,aAAN,CAAoB,IAAI,KAAJ,CAAU,OAAV,CAApB;AACA,IAAA,OAAO,CAAC,aAAR;AACA,IAAA,IAAI;AACL,GAT4D,CAA3D,CAAF;AAUD,CAlDO,CAAR","sourcesContent":["import { ComponentFixture, TestBed, fakeAsync, tick } from '@angular/core/testing';\r\nimport {RouterTestingModule} from '@angular/router/testing';\r\nimport {HttpClientTestingModule, HttpTestingController} from '@angular/common/http/testing';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { By } from '@angular/platform-browser';\r\n\r\nimport { NewPostComponent } from './new-post.component';\r\n\r\ndescribe('NewPostComponent', () => {\r\n  let component: NewPostComponent;\r\n  let fixture: ComponentFixture<NewPostComponent>;\r\n\r\n  beforeEach(async () => {\r\n    await TestBed.configureTestingModule({\r\n      declarations: [ NewPostComponent ],\r\n      imports: [RouterTestingModule, HttpClientTestingModule, FormsModule]\r\n    })\r\n    .compileComponents();\r\n  });\r\n\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(NewPostComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('should change the value of error if there is no content', () => {\r\n    //Error should only occur on submit if there is no content\r\n    expect(component.error.valueOf()).toBeFalsy();\r\n    component.onSubmit();\r\n    fixture.detectChanges();\r\n    expect(component.error.valueOf()).toBeTruthy();\r\n  });\r\n\r\n  it('should update the value of content when typed in', fakeAsync(() => {\r\n    const input = fixture.debugElement.query(By.css('textarea')).nativeElement;\r\n    fixture.detectChanges();\r\n    tick();\r\n    input.value = 'Test';\r\n    input.dispatchEvent(new Event('input'));\r\n    tick();\r\n    expect(component.content).toBe('Test');\r\n  }));\r\n\r\n  it('should call the service method when submitted' ,fakeAsync(()=> {\r\n    const input = fixture.debugElement.query(By.css('textarea')).nativeElement;\r\n    fixture.detectChanges();\r\n    tick();\r\n    console.log(input);\r\n    input.value = 'Test';\r\n    input.dispatchEvent(new Event('input'));\r\n    fixture.detectChanges();\r\n    tick();\r\n  }));\r\n});\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}